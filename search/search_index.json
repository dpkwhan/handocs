{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"David's Blog \u00b6 This is a blog site maintained by David Han. Github Pages","title":"Home"},{"location":"#davids-blog","text":"This is a blog site maintained by David Han. Github Pages","title":"David's Blog"},{"location":"aboutme/","text":"About me \u00b6 I am passionate about every aspects of electronic trading, including: sales and trading market microstructure algorithms specification and implementation smart order router client analytics and research venue analysis regulartions and rules mathematics and statistics realtime and historical analytics programming in Java, Python, Kdb/q, JavaScript, HTML, CSS and more...","title":"About me"},{"location":"aboutme/#about-me","text":"I am passionate about every aspects of electronic trading, including: sales and trading market microstructure algorithms specification and implementation smart order router client analytics and research venue analysis regulartions and rules mathematics and statistics realtime and historical analytics programming in Java, Python, Kdb/q, JavaScript, HTML, CSS and more...","title":"About me"},{"location":"getting-started/","text":"Getting started \u00b6 Live Preview \u00b6 MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: 1 mkdocs serve Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#live-preview","text":"MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: 1 mkdocs serve Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme.","title":"Live Preview"},{"location":"javascript/array-concatenation/","text":"Array Concatenation \u00b6 May 25, 2019 Introduction \u00b6 Array concatenation is very common in JavaScript. In this blog, I provide four different approaches to do this and also provide the performance comparison. Suppose we have two simple arrays like: 1 2 const a1 = [ 1 , \"David\" , 3 ]; const a2 = [ \"Tom\" , 3 , \"Jeff\" ]; Array.concat \u00b6 Arrays in JavaScript have a built-in function concat . We can use it to combine two or multiple arrays into a single one. 1 const a = a1 . concat ( a2 ); Spread Operator \u00b6 The spread operator was introduced in ES6. It provides you the ability to expand iterable objects into multiple elements. We can use it to combine multiple arrays into a single array. 1 const a = [... a1 , ... a2 ]; Looped Insertion \u00b6 May 25, 2019 Use a for-of loop to append each element of the second array to the first array. 1 2 3 4 const a = a1 . slice (); for ( const e of a2 ) { a . push ( e ); } Functional Reduce \u00b6 We can also use functional reduce to combine two arrays. 1 2 3 4 const a = a2 . reduce (( acc , item ) => { acc . push ( item ); return acc ; }, a1 ); Performance Comparison \u00b6 I created a test case to test the performance of the above four methods in jsperf.com . Here is the link to the test case . Observations: The latest version of Chrome improve the speed of concatenation dramatically. Looped Insertion is the fastest in the latest version of Chrome. The speed of Spread Operator is close to the fastest one. Remarks \u00b6 Given the speed of Spread Operator is very close to the fastest and more importantly it has a very consise and easy syntax. I would recommend using spread operator to concatenate arrays.","title":"Array Concatenation"},{"location":"javascript/array-concatenation/#array-concatenation","text":"May 25, 2019","title":"Array Concatenation"},{"location":"javascript/array-concatenation/#introduction","text":"Array concatenation is very common in JavaScript. In this blog, I provide four different approaches to do this and also provide the performance comparison. Suppose we have two simple arrays like: 1 2 const a1 = [ 1 , \"David\" , 3 ]; const a2 = [ \"Tom\" , 3 , \"Jeff\" ];","title":"Introduction"},{"location":"javascript/array-concatenation/#arrayconcat","text":"Arrays in JavaScript have a built-in function concat . We can use it to combine two or multiple arrays into a single one. 1 const a = a1 . concat ( a2 );","title":"Array.concat"},{"location":"javascript/array-concatenation/#spread-operator","text":"The spread operator was introduced in ES6. It provides you the ability to expand iterable objects into multiple elements. We can use it to combine multiple arrays into a single array. 1 const a = [... a1 , ... a2 ];","title":"Spread Operator"},{"location":"javascript/array-concatenation/#looped-insertion","text":"May 25, 2019 Use a for-of loop to append each element of the second array to the first array. 1 2 3 4 const a = a1 . slice (); for ( const e of a2 ) { a . push ( e ); }","title":"Looped Insertion"},{"location":"javascript/array-concatenation/#functional-reduce","text":"We can also use functional reduce to combine two arrays. 1 2 3 4 const a = a2 . reduce (( acc , item ) => { acc . push ( item ); return acc ; }, a1 );","title":"Functional Reduce"},{"location":"javascript/array-concatenation/#performance-comparison","text":"I created a test case to test the performance of the above four methods in jsperf.com . Here is the link to the test case . Observations: The latest version of Chrome improve the speed of concatenation dramatically. Looped Insertion is the fastest in the latest version of Chrome. The speed of Spread Operator is close to the fastest one.","title":"Performance Comparison"},{"location":"javascript/array-concatenation/#remarks","text":"Given the speed of Spread Operator is very close to the fastest and more importantly it has a very consise and easy syntax. I would recommend using spread operator to concatenate arrays.","title":"Remarks"},{"location":"javascript/bubble-chart-in-javascript/","text":"Bubble Chart in JavaScript \u00b6 Aug 17, 2019 In this article, I visualized the GDP Per Capita and Life Expectancy for a few selected countries in 1990 and 2015 using three popular JavaScript charting libraries: ECharts: http://echarts.apache.org Highcharts: https://www.highcharts.com/ PlotlyJS: https://plot.ly/javascript/ I've been using Highcharts for a couple of years in my web applications, but this is the first time I used ECharts and PlotlyJS. I actually just heard of ECharts yesterday in a blog article about pyechart , a Python Echarts plotting library. I saw some cool featured provided by pyechart and that stimulated my interest in exploring the underlying JavaScript library used by pyechart. Playing with it for a couple of hours made me really like it since it offers very similar features as Highcharts as well as: It is open sourced and free, but Highcharts is a commercial software It also offers support to WebGL, which makes 3D plotting a breeze It's documentation, example gallery and user community is strong It is developed and maintained by Baidu, a big Chinese tech company listed on NASDAQ It is time to move to open-sourced and free charting library ECharts! ECharts Highcharts PlotlyJS","title":"Charting Library in JavaScript"},{"location":"javascript/bubble-chart-in-javascript/#bubble-chart-in-javascript","text":"Aug 17, 2019 In this article, I visualized the GDP Per Capita and Life Expectancy for a few selected countries in 1990 and 2015 using three popular JavaScript charting libraries: ECharts: http://echarts.apache.org Highcharts: https://www.highcharts.com/ PlotlyJS: https://plot.ly/javascript/ I've been using Highcharts for a couple of years in my web applications, but this is the first time I used ECharts and PlotlyJS. I actually just heard of ECharts yesterday in a blog article about pyechart , a Python Echarts plotting library. I saw some cool featured provided by pyechart and that stimulated my interest in exploring the underlying JavaScript library used by pyechart. Playing with it for a couple of hours made me really like it since it offers very similar features as Highcharts as well as: It is open sourced and free, but Highcharts is a commercial software It also offers support to WebGL, which makes 3D plotting a breeze It's documentation, example gallery and user community is strong It is developed and maintained by Baidu, a big Chinese tech company listed on NASDAQ It is time to move to open-sourced and free charting library ECharts! ECharts Highcharts PlotlyJS","title":"Bubble Chart in JavaScript"},{"location":"javascript/my-journey-to-web-scraping/","text":"My Journey to Web Scraping \u00b6 May 27, 2019 Introduction \u00b6 I started to learn web scraping techniques over the long weekend of Memorial Day in 2015. The main reason for me to learn this is that one of my colleagues manually downloaded the FINRA ATS data every week from its website. The steps she followed are like this: Go to https://otctransparency.finra.org Type in username and password 1 Answer three security questions Click \"I Agree\" button Select the date from the dropdown menu Select the \"Report Type\" radio button Click the link to each symbol to download Report the above step for each symbol You can imagine how tedious this is and very quickly she is bored. I was thinking whether this process could be automated. Then I started to search for a soluation and I found it. The library that can do this job is PhantomJS , a headless web browser scriptable with JavaScript. Over that long weekend four years ago, I learned PhantomJS and wrote my first web crawler to automatically download FINRA ATS data. In this blog, I am going to walk through each technology I tried before and the advantages and disadvantages each method has, but I will not discuss each technology in depth. I will provide an real-life example of how to use each technoglogy to scrape data from a website in future blogs. PhantomJS \u00b6 PhantomJS is a headless web browser scriptable with JavaScript. It is very powerful and capable of handling dynamic web pages. This libray opened a brand new window for me and it got my journey to web scraping started. Selenium with Python \u00b6 Selenium automates browsers. Initially, it is built for automating unit/regression testing in web applications. We can also use it for web crawling. Selenium with Python provides an easy-to-use API to use webdriver to interact with web component in a physical web browser. It basically launch your web browser and enable you do whatever you can do manually but in a programmatically way. Selenium with Python script can only run from a Windows machine since it needs to physically launch a browser. Requests in Python \u00b6 Requests is an HTTP library for Python, built for Humans and Machines, alike. It is extremely easy and efficient to use if you want to get some static data from a website. Unfortunately if the data from a website is dynamically generated, it is not easy to use Requests to get them since it cannot interact with JavaScript. Scrapy \u00b6 Scrapy is also a Python libray built specifically for web scraping. It is very powerful to extract static data you need from a website. It also has the same limitation as Requests since it cannot interpret JavaScript. Puppeteer \u00b6 From Puppeteer 's official documentation site: Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium. The release of Puppeteer by Google basically made PhantomJS unpopular and unnecessary since Puppeteer can do everything that PhantomJS can do and offers a lot more features. Curl \u00b6 The curl tool lets us fetch a given URL from the command-line and sometimes it is the easiest approach to retrieve a static files from a website. It is also very convenient to use curl to fetch data from an API. Later I will show how to use curl to download ATS data from FINRA website. In 2015, the FINRA ATS data is credentials protected and an annual fee is charged to access it. Later FINRA made it free and open to public. A while later, FINRA also made batch data downloading available. In January 2019, FINRA provides API to download its ATS data. Over the years, FINRA's data transparency program made trmendous efforts to make its data more accessible to users. \u21a9","title":"My Journey to Web Scraping"},{"location":"javascript/my-journey-to-web-scraping/#my-journey-to-web-scraping","text":"May 27, 2019","title":"My Journey to Web Scraping"},{"location":"javascript/my-journey-to-web-scraping/#introduction","text":"I started to learn web scraping techniques over the long weekend of Memorial Day in 2015. The main reason for me to learn this is that one of my colleagues manually downloaded the FINRA ATS data every week from its website. The steps she followed are like this: Go to https://otctransparency.finra.org Type in username and password 1 Answer three security questions Click \"I Agree\" button Select the date from the dropdown menu Select the \"Report Type\" radio button Click the link to each symbol to download Report the above step for each symbol You can imagine how tedious this is and very quickly she is bored. I was thinking whether this process could be automated. Then I started to search for a soluation and I found it. The library that can do this job is PhantomJS , a headless web browser scriptable with JavaScript. Over that long weekend four years ago, I learned PhantomJS and wrote my first web crawler to automatically download FINRA ATS data. In this blog, I am going to walk through each technology I tried before and the advantages and disadvantages each method has, but I will not discuss each technology in depth. I will provide an real-life example of how to use each technoglogy to scrape data from a website in future blogs.","title":"Introduction"},{"location":"javascript/my-journey-to-web-scraping/#phantomjs","text":"PhantomJS is a headless web browser scriptable with JavaScript. It is very powerful and capable of handling dynamic web pages. This libray opened a brand new window for me and it got my journey to web scraping started.","title":"PhantomJS"},{"location":"javascript/my-journey-to-web-scraping/#selenium-with-python","text":"Selenium automates browsers. Initially, it is built for automating unit/regression testing in web applications. We can also use it for web crawling. Selenium with Python provides an easy-to-use API to use webdriver to interact with web component in a physical web browser. It basically launch your web browser and enable you do whatever you can do manually but in a programmatically way. Selenium with Python script can only run from a Windows machine since it needs to physically launch a browser.","title":"Selenium with Python"},{"location":"javascript/my-journey-to-web-scraping/#requests-in-python","text":"Requests is an HTTP library for Python, built for Humans and Machines, alike. It is extremely easy and efficient to use if you want to get some static data from a website. Unfortunately if the data from a website is dynamically generated, it is not easy to use Requests to get them since it cannot interact with JavaScript.","title":"Requests in Python"},{"location":"javascript/my-journey-to-web-scraping/#scrapy","text":"Scrapy is also a Python libray built specifically for web scraping. It is very powerful to extract static data you need from a website. It also has the same limitation as Requests since it cannot interpret JavaScript.","title":"Scrapy"},{"location":"javascript/my-journey-to-web-scraping/#puppeteer","text":"From Puppeteer 's official documentation site: Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium. The release of Puppeteer by Google basically made PhantomJS unpopular and unnecessary since Puppeteer can do everything that PhantomJS can do and offers a lot more features.","title":"Puppeteer"},{"location":"javascript/my-journey-to-web-scraping/#curl","text":"The curl tool lets us fetch a given URL from the command-line and sometimes it is the easiest approach to retrieve a static files from a website. It is also very convenient to use curl to fetch data from an API. Later I will show how to use curl to download ATS data from FINRA website. In 2015, the FINRA ATS data is credentials protected and an annual fee is charged to access it. Later FINRA made it free and open to public. A while later, FINRA also made batch data downloading available. In January 2019, FINRA provides API to download its ATS data. Over the years, FINRA's data transparency program made trmendous efforts to make its data more accessible to users. \u21a9","title":"Curl"},{"location":"kdb/add-a-new-key-to-dictionary/","text":"Add a new key to dictionary \u00b6 May 13, 2019 Introduction \u00b6 Suppose you have an existing dictionary d as follows: 1 2 3 4 q)d:`firstName`lastName!`David`Han q)d firstName| David lastName | Han Now I want to add another key to this dictionary to indicate my age, say, d[`age]:30 . Unfortunately, you will see this: 1 2 3 4 q)d[`age]:30 'type [0] d[`age]:30 ^ The type error occurs because: The existing dictionary is uniform, and The value type of new item is different from the value type of the existing dictionary Mixed Value Types \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 q)d2:`firstName`lastName`zip!(`David;`Han;10583) q)d2 firstName| `David lastName | `Han zip | 10583 q)d2[`age]:30 /add a new item q)d2 firstName| `David lastName | `Han zip | 10583 age | 30 Uniform Value Type \u00b6 When the value type of the new item is different from the value type of the existing dictionary, we can create a second dictonary with the new key and then merge this dictionary with the existing dictionary. For example 1 2 3 4 5 6 7 8 9 q)d:`firstName`lastName!`David`Han q)d firstName| David lastName | Han q)d,(enlist `age)!(enlist 30) firstName| `David lastName | `Han age | 30 Remarks \u00b6 When the value type of a dictionary is not known in advance, the second approach provides a more robust way to insert a new entry to an existing dictionary.","title":"Add a new key to dictionary"},{"location":"kdb/add-a-new-key-to-dictionary/#add-a-new-key-to-dictionary","text":"May 13, 2019","title":"Add a new key to dictionary"},{"location":"kdb/add-a-new-key-to-dictionary/#introduction","text":"Suppose you have an existing dictionary d as follows: 1 2 3 4 q)d:`firstName`lastName!`David`Han q)d firstName| David lastName | Han Now I want to add another key to this dictionary to indicate my age, say, d[`age]:30 . Unfortunately, you will see this: 1 2 3 4 q)d[`age]:30 'type [0] d[`age]:30 ^ The type error occurs because: The existing dictionary is uniform, and The value type of new item is different from the value type of the existing dictionary","title":"Introduction"},{"location":"kdb/add-a-new-key-to-dictionary/#mixed-value-types","text":"1 2 3 4 5 6 7 8 9 10 11 12 q)d2:`firstName`lastName`zip!(`David;`Han;10583) q)d2 firstName| `David lastName | `Han zip | 10583 q)d2[`age]:30 /add a new item q)d2 firstName| `David lastName | `Han zip | 10583 age | 30","title":"Mixed Value Types"},{"location":"kdb/add-a-new-key-to-dictionary/#uniform-value-type","text":"When the value type of the new item is different from the value type of the existing dictionary, we can create a second dictonary with the new key and then merge this dictionary with the existing dictionary. For example 1 2 3 4 5 6 7 8 9 q)d:`firstName`lastName!`David`Han q)d firstName| David lastName | Han q)d,(enlist `age)!(enlist 30) firstName| `David lastName | `Han age | 30","title":"Uniform Value Type"},{"location":"kdb/add-a-new-key-to-dictionary/#remarks","text":"When the value type of a dictionary is not known in advance, the second approach provides a more robust way to insert a new entry to an existing dictionary.","title":"Remarks"},{"location":"kdb/function-argument/","text":"Function Argument \u00b6","title":"Function Argument"},{"location":"kdb/function-argument/#function-argument","text":"","title":"Function Argument"},{"location":"kdb/remove-a-character-from-a-string/","text":"Removing a Character from a String \u00b6 Nov 9, 2019 Removing a character from a string. For example, convert 2019.11.09 to 20191109 by removing the dot: 1 s:\"2019.11.09\"; No. Method Execution Time (milliseconds) 1 do[1000000;ssr[s;\".\";\"\"]] 2,109 2 do[1000000;except[;\".\"] s] 404 3 do[1000000;s except \".\"] 328 4 do[1000000;s where s<>\".\"] 445 The first one took 2,109 2,109 ms, but the second one took 404 ms on my PC. Using except is five times faster than string search and replacement ( ssr ). Furthermore, if function projection is replaced with the juxtaposition form, the speed is further improved and it takes only 328 ms to finish. The speed of method 4 is Okay, but slightly slower than except . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 s:\"2019.12.06\"; // Method 1: 2739ms \\t:1000000 raze sublist[;s] each (4;5 2;-2) // Method 2: 2098ms \\t:1000000 ssr[s;\".\";\"\"] // Method 3: 720ms \\t:1000000 (4#s),(2#-5#s),-2#s // Method 4: 574ms \\t:1000000 \"\" sv \".\" vs s // Method 5: 475ms \\t:1000000 raze \".\" vs s // Method 6: 440ms \\t:1000000 s where s<>\".\" // Method 7: 424ms \\t:1000000 except[;\".\"] s // Method 8: 402ms \\t:1000000 s where not s=\".\" // Method 9: 291ms \\t:1000000 s except \".\" // Method 10: 277ms \\t:1000000 s _/ 4 6","title":"Removing a Character from a String"},{"location":"kdb/remove-a-character-from-a-string/#removing-a-character-from-a-string","text":"Nov 9, 2019 Removing a character from a string. For example, convert 2019.11.09 to 20191109 by removing the dot: 1 s:\"2019.11.09\"; No. Method Execution Time (milliseconds) 1 do[1000000;ssr[s;\".\";\"\"]] 2,109 2 do[1000000;except[;\".\"] s] 404 3 do[1000000;s except \".\"] 328 4 do[1000000;s where s<>\".\"] 445 The first one took 2,109 2,109 ms, but the second one took 404 ms on my PC. Using except is five times faster than string search and replacement ( ssr ). Furthermore, if function projection is replaced with the juxtaposition form, the speed is further improved and it takes only 328 ms to finish. The speed of method 4 is Okay, but slightly slower than except . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 s:\"2019.12.06\"; // Method 1: 2739ms \\t:1000000 raze sublist[;s] each (4;5 2;-2) // Method 2: 2098ms \\t:1000000 ssr[s;\".\";\"\"] // Method 3: 720ms \\t:1000000 (4#s),(2#-5#s),-2#s // Method 4: 574ms \\t:1000000 \"\" sv \".\" vs s // Method 5: 475ms \\t:1000000 raze \".\" vs s // Method 6: 440ms \\t:1000000 s where s<>\".\" // Method 7: 424ms \\t:1000000 except[;\".\"] s // Method 8: 402ms \\t:1000000 s where not s=\".\" // Method 9: 291ms \\t:1000000 s except \".\" // Method 10: 277ms \\t:1000000 s _/ 4 6","title":"Removing a Character from a String"},{"location":"kdb/try-catch/","text":"Try and Catch in q \u00b6 June 6, 2019 Error handling is one of basic features of any programming language. The proper handling of error in runtime can gives us much more intuitive and easier to understand messages. Here are some basic try-catch examples in Python, JavaScript and Java. Python \u00b6 1 2 3 4 5 6 try : some_code () except TypeError as e : handle_error ( e ) finally : other_code () JavaScript \u00b6 1 2 3 4 5 try { someCode (); } catch ( err ) { console . log ( err ); } Java \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 public class MyClass { public static void main ( String [] args ) { try { int [] myNumbers = { 1 , 2 , 3 }; System . out . println ( myNumbers [ 10 ] ); } catch ( Exception e ) { System . out . println ( \"Something went wrong.\" ); } finally { System . out . println ( \"The 'try catch' is finished.\" ); } } } q \u00b6 The other day, one of my colleague asked me how to use try-catch in q. To be frank, I never used it before. A few days ago, I read the following code at line 102 of this script : 1 loadRes:@[system;\"l \",x;{ (`LOAD_FAILURE;x) }]; I am quite familiar with the syntax of loading a script: 1 system \"l \", \"/path/to/a/script.q\" However, in this example the syntaxt is: 1 @[f;fx;g] where f and g are functions and fx is the argument of function f . A little bit research led me to the Kx official documentation site about Trap . This is exactly the equivalent form of try-catch in other programmming language. This means that function f is evaluated at fx and function g is evaluated if the evaluation of f fails. More details and examples can be found here . P.S.: Ferenc Bodon pointed out in the LinkedIn comment that this is also covered by Q for Mortals in Protected Evaluation and this functionality is extended further in .Q.trp since V3.5.","title":"Try and Catch in q"},{"location":"kdb/try-catch/#try-and-catch-in-q","text":"June 6, 2019 Error handling is one of basic features of any programming language. The proper handling of error in runtime can gives us much more intuitive and easier to understand messages. Here are some basic try-catch examples in Python, JavaScript and Java.","title":"Try and Catch in q"},{"location":"kdb/try-catch/#python","text":"1 2 3 4 5 6 try : some_code () except TypeError as e : handle_error ( e ) finally : other_code ()","title":"Python"},{"location":"kdb/try-catch/#javascript","text":"1 2 3 4 5 try { someCode (); } catch ( err ) { console . log ( err ); }","title":"JavaScript"},{"location":"kdb/try-catch/#java","text":"1 2 3 4 5 6 7 8 9 10 11 12 public class MyClass { public static void main ( String [] args ) { try { int [] myNumbers = { 1 , 2 , 3 }; System . out . println ( myNumbers [ 10 ] ); } catch ( Exception e ) { System . out . println ( \"Something went wrong.\" ); } finally { System . out . println ( \"The 'try catch' is finished.\" ); } } }","title":"Java"},{"location":"kdb/try-catch/#q","text":"The other day, one of my colleague asked me how to use try-catch in q. To be frank, I never used it before. A few days ago, I read the following code at line 102 of this script : 1 loadRes:@[system;\"l \",x;{ (`LOAD_FAILURE;x) }]; I am quite familiar with the syntax of loading a script: 1 system \"l \", \"/path/to/a/script.q\" However, in this example the syntaxt is: 1 @[f;fx;g] where f and g are functions and fx is the argument of function f . A little bit research led me to the Kx official documentation site about Trap . This is exactly the equivalent form of try-catch in other programmming language. This means that function f is evaluated at fx and function g is evaluated if the evaluation of f fails. More details and examples can be found here . P.S.: Ferenc Bodon pointed out in the LinkedIn comment that this is also covered by Q for Mortals in Protected Evaluation and this functionality is extended further in .Q.trp since V3.5.","title":"q"},{"location":"kdb/write-function-for-rdb-and-hdb/","text":"Write a Function for both HDB and RDB \u00b6","title":"Write a Function for both HDB and RDB"},{"location":"kdb/write-function-for-rdb-and-hdb/#write-a-function-for-both-hdb-and-rdb","text":"","title":"Write a Function for both HDB and RDB"},{"location":"markets/finra-ats/","text":"FINRA ATS \u00b6 May 15, 2019 Coming soon!","title":"FINRA ATS"},{"location":"markets/finra-ats/#finra-ats","text":"May 15, 2019 Coming soon!","title":"FINRA ATS"},{"location":"markets/short-sell-restriction/","text":"Short Sell Restriction \u00b6 May 10, 2019 I had a VWAP long sell order on LMNX.OQ unfinished on May 8, 2019. One basic requirement of a VWAP strategy is to guarantee the order completion at client specified end time or market close if an end time is not provided for the client order if no volume limit or price limit. This made me a little bit confused \ud83d\ude1f. A quick digging shows this stock was trading under short sell restriction. Due to this restriction, the VWAP algorithm cannot cross the spread to finish the residual shares. My immediate question is why this long sell order is short sell restricted. Some research leads me to the NYSE TAQ Specifications . On page 24, it says A Short Sale Restriction is to be in effect if a security\u2019s price decreases by 10% or more from the previous day\u2019s closing price. Once activated, the Short Sale Restriction will remain in effect for the remainder of the day as well as the following day, unless deactivated. Next I went to Yahoo Finance to check the OHLC prices for the days before May 8, 2019 as shown below: Clearly the intraday price dropped more than 10% from its previous close on May 7, 2019, which activated the short sell restriction. So the trading on May 8 is also under SSR. Why did the price drop so much on May 7, 2019? A little further digging shows this is due to the much worse earnings than the average expectation repored after market close on May 6, 2019. The earnings surprise is -200%.","title":"Short Sell Restriction"},{"location":"markets/short-sell-restriction/#short-sell-restriction","text":"May 10, 2019 I had a VWAP long sell order on LMNX.OQ unfinished on May 8, 2019. One basic requirement of a VWAP strategy is to guarantee the order completion at client specified end time or market close if an end time is not provided for the client order if no volume limit or price limit. This made me a little bit confused \ud83d\ude1f. A quick digging shows this stock was trading under short sell restriction. Due to this restriction, the VWAP algorithm cannot cross the spread to finish the residual shares. My immediate question is why this long sell order is short sell restricted. Some research leads me to the NYSE TAQ Specifications . On page 24, it says A Short Sale Restriction is to be in effect if a security\u2019s price decreases by 10% or more from the previous day\u2019s closing price. Once activated, the Short Sale Restriction will remain in effect for the remainder of the day as well as the following day, unless deactivated. Next I went to Yahoo Finance to check the OHLC prices for the days before May 8, 2019 as shown below: Clearly the intraday price dropped more than 10% from its previous close on May 7, 2019, which activated the short sell restriction. So the trading on May 8 is also under SSR. Why did the price drop so much on May 7, 2019? A little further digging shows this is due to the much worse earnings than the average expectation repored after market close on May 6, 2019. The earnings surprise is -200%.","title":"Short Sell Restriction"},{"location":"markets/symbology/","text":"Symbology in U.S. Equities Market \u00b6 Sept 18, 2019 There are multiple symbology systems in the U.S. equities market and some of them are widely used in global financial markets. This article goes through each symbology system briefly and provides an example of how symbol conversion should be done properly with FINRA ATS data. Symbology in FIX \u00b6 The following four symbology systems are supported by FIX Protocol. More info about FIX can be found here . Tag 48 : Security ID Tag 22 : Security ID Source RIC \u00b6 A Reuters Instrument Code (RIC) is a ticker-like code used by Thomson Reuters to identify financial instruments and indices. For equities the codes were composed of a RIC Root (one to four characters \u2013 A through Z), followed by a period sign, then a one- or two-character (A through Z) code denoting the exchange on which the instrument is traded. Each company was meant to have a unique RIC root. Thus the RIC Root for International Business Machines would be IBM irrespective of the exchange on which International Business Machines was traded. Indexes have a leading period, for instance .DJI is the Dow Jones Industrial Average. Some examples: RIC NYSE Symbol Security Type XXXa.N XXX A Class A XXX_w.N XXX WI Warrant XXX_r.N XXX RT Right XXX_pb.N XXX PRB Preferred Class B ISIN \u00b6 An International Securities Identification Number (ISIN) is a code that uniquely identifies a specific securities issue. An ISIN is a code that uniquely identifies a specific securities issue. The numbers are allocated by a country's respective national numbering agency (NNA). In the United States, it is the CUSIP Service Bureau. An ISIN is not the same as the ticker symbol, which identifies the stock at the exchange level. The ISIN is a number assigned to a security that is universally recognizable. ISINs are used for numerous reasons including clearing and settlement. The numbers ensure a consistent format so that holdings of institutional investors can be tracked consistent across markets worldwide. ISIN codes have a total of 12 characters consisting of both letters and numbers. First two digits: the country in which the issuing company is headquartered (first two digits), along with a number specific to the security (middle nine digits), and a final character, which acts as a check. An example of an ISIN number for a US company\u2019s stock certificate could look like this: US-000402625-0 (dashes incorporated for simplicity). On the other hand, a theoretical Namibian company could have an ISIN, which appears as NA-000K0VF05-4. The middle nine digits of the ISIN are computer-generated in a complex formula. All internationally traded securities issuers are urged to use the ISIN numbering scheme, which is now the accepted standard by virtually all countries. The United States and Canada primarily use CUSIP number. CUSIP \u00b6 CUSIP stands for Committee on Uniform Securities Identification Procedures. A CUSIP number identifies most financial instruments, including: stocks of all registered U.S. and Canadian companies, commercial paper, and U.S. government and municipal bonds. The CUSIP system (formally known as CUSIP Global Services)\u2014owned by the American Bankers Association and managed by Standard & Poor\u2019s\u2014facilitates the clearance and settlement process of securities. CUSIP numbers consist of nine characters (including letters and numbers) that uniquely identify a company or issuer and the type of financial instrument. The first six characters are known as the base, or CUSIP-6, and identify the bond issuer. The seventh and eighth digits identify the type of bond and the ninth digit is a \u201ccheck digit\u201d that is automatically generated. SEDOL \u00b6 The description below is from wiki . SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes. The numbers are assigned by the London Stock Exchange, on request by the security issuer. SEDOLs serve as the National Securities Identifying Number for all securities issued in the United Kingdom and are therefore part of the security's ISIN as well. SEDOLs are seven characters in length, consisting of two parts: a six-place alphanumeric code and a trailing check digit.[1] SEDOLs issued prior to January 26, 2004 were composed only of numbers. For older SEDOLs, those from Asia and Africa typically begin with 6. Those from the UK and Ireland (until Ireland joined the EU) typically begin with 0 or 3. Those from the rest of Europe typically began with 4, 5, or 7. Those from the Americas began with 2. After January 26, 2004, SEDOLs were changed to be alpha-numeric and are issued sequentially, beginning with B000009. At each character position numbers precede letters and vowels are never used. All new SEDOLs, therefore, begin with a letter. Ranges beginning with 9 are reserved for end user allocation. The check digit for a SEDOL is chosen to make the total weighted sum of all seven characters a multiple of 10. The check digit is computed using a weighted sum of the first six characters. Letters have the value of 9 plus their alphabet position, such that B = 11 and Z = 35. While vowels are never used in SEDOLs, they are not ignored when computing this weighted sum (e.g. H = 17 and J = 19, even though I is not used), simplifying code to compute this sum. The resulting string of numbers is then multiplied by the weighting factor as follows: Other Symbology \u00b6 Bloomberg Ticker \u00b6 A Bloomberg ticker is a string of characters or numbers to identify a company or entity uniquely in Bloomberg. Equity Bloomberg ticker is made up of 3 parts: Bloomberg ticker Exchange code Market Sector [Equity] Examples : Singapore Airlines is SIA SP EQUITY . IBM is IBM US EQUITY . Index Bloomberg ticker consists of: Bloomberg ticker Market Sector [Index] Example : Hang Seng Index is HSI INDEX . NASDAQ ACT \u00b6 This symbology is for reporting and clearing . Automated Confirmation of Transactions (ACT), is a system for reporting and clearing trades in the over-the-counter (OTC) and NASDAQ securities markets. The Financial Industry Regulatory Authority (FINRA) also refers to NASDAQ ACT as the Trade Reporting Facility (TRF). NASDAQ Integrated Platform \u00b6 This symbology is for trading . Initially, NASDAQ use the integrated platform symbology for non-Nasdaq listed names. From 2007 to 2010, Nasdaq migrated from fifth-character modifier symbology to the integrated platform suffix. More info about this migration can be found here . CEBO (BATS, BATS Y, EDGEA, EDGEX) follows this symbology. The list of symbols traded is available here . NYSE Symbol \u00b6 NYSE provides Daily TAQ (Trade and Quote) which includes all trades and quotes for all issues traded on U.S. exchanges and off-markets. The Daily TAQ files also include the NBBO, Master file, Quote and Trade Admin Messages, and, CTA and UTP Admin Message files. Historical Data available as of 1993-present. Symbols in NYSE TAQ are expressed in NYSE Symbology, which consists of Root (6 chars maximum), space, and Suffix (10 chars maximum) . See the NYSE Symbology Specification for details. The Master File also includes the symbols in the original formats published by the SIPs. For CTA symbols, see CTS Binary Output Specification Appendix B. For UTP symbols, see Nasdaq 5 th Character Suffix List . Some basic stats on the length of root and suffix in NYSE symbols over the first half year in 2019: listedExchange nSymbols minRootLength maxRootLength minSuffixLength maxSuffixLength A 330 2 4 0 4 N 3274 1 4 0 5 P 1667 2 4 0 0 Q 3644 1 4 0 1 V 1 4 4 0 0 Z 343 3 4 0 0 One example of NYSE symbol that has five chars in suffix is C PRLCL , which is Pr eferred Class L C a l led. SIP Symbol \u00b6 In NYSE TAQ, the \"SIP Symbol\" uses mixed symbology: For Nasdaq-listed securities, it is Nasdaq lising symbol For other regionally listed securities, it is CQS (Consolidated Quotation System) symbol FINRA ATS Data \u00b6 FINRA made the ATS and non-ATS data available to public for free. It also provides an API to retrieve data from its database in January 2019. This data povides us a channel and the only channel to understand the liquidity distribution on off markets. To find the full liquidity distribution among all lit exchanges and dark pools, we need to marry FINRA ATS data with NYSE TAQ data. In this process, the first problem we need to solve is the symbol mapping. Tier 1 Tier 2 The Appendix A of FINRA OTC Transparency API Specifications provides some additional information on what symbology is used for ATS and non-ATS data reported to FINRA. Here is the Appendix A: This section serves as a supplemental resource for security and symbol information provided by FINRA. Reports are published using the NASDAQ assigned listing symbol for UTP securities and the NASDAQ ACT symbol for Other Exchange Listed securities (NMS stocks). Other Exchange Listed security symbols may contain a special character such as \u201c.\u201d or \u201c$\u201d to separate the root symbol from the suffix. Daily list of Nasdaq listed symbols Daily list of other listed symbols Ticker Symbol Convention Mapping between NYSE Symbol and FINRA Symbol References \u00b6 NASDAQ ACT CQS Symbol Conversion Reuters Instrument Code","title":"Equities Market Symbology"},{"location":"markets/symbology/#symbology-in-us-equities-market","text":"Sept 18, 2019 There are multiple symbology systems in the U.S. equities market and some of them are widely used in global financial markets. This article goes through each symbology system briefly and provides an example of how symbol conversion should be done properly with FINRA ATS data.","title":"Symbology in U.S. Equities Market"},{"location":"markets/symbology/#symbology-in-fix","text":"The following four symbology systems are supported by FIX Protocol. More info about FIX can be found here . Tag 48 : Security ID Tag 22 : Security ID Source","title":"Symbology in FIX"},{"location":"markets/symbology/#ric","text":"A Reuters Instrument Code (RIC) is a ticker-like code used by Thomson Reuters to identify financial instruments and indices. For equities the codes were composed of a RIC Root (one to four characters \u2013 A through Z), followed by a period sign, then a one- or two-character (A through Z) code denoting the exchange on which the instrument is traded. Each company was meant to have a unique RIC root. Thus the RIC Root for International Business Machines would be IBM irrespective of the exchange on which International Business Machines was traded. Indexes have a leading period, for instance .DJI is the Dow Jones Industrial Average. Some examples: RIC NYSE Symbol Security Type XXXa.N XXX A Class A XXX_w.N XXX WI Warrant XXX_r.N XXX RT Right XXX_pb.N XXX PRB Preferred Class B","title":"RIC"},{"location":"markets/symbology/#isin","text":"An International Securities Identification Number (ISIN) is a code that uniquely identifies a specific securities issue. An ISIN is a code that uniquely identifies a specific securities issue. The numbers are allocated by a country's respective national numbering agency (NNA). In the United States, it is the CUSIP Service Bureau. An ISIN is not the same as the ticker symbol, which identifies the stock at the exchange level. The ISIN is a number assigned to a security that is universally recognizable. ISINs are used for numerous reasons including clearing and settlement. The numbers ensure a consistent format so that holdings of institutional investors can be tracked consistent across markets worldwide. ISIN codes have a total of 12 characters consisting of both letters and numbers. First two digits: the country in which the issuing company is headquartered (first two digits), along with a number specific to the security (middle nine digits), and a final character, which acts as a check. An example of an ISIN number for a US company\u2019s stock certificate could look like this: US-000402625-0 (dashes incorporated for simplicity). On the other hand, a theoretical Namibian company could have an ISIN, which appears as NA-000K0VF05-4. The middle nine digits of the ISIN are computer-generated in a complex formula. All internationally traded securities issuers are urged to use the ISIN numbering scheme, which is now the accepted standard by virtually all countries. The United States and Canada primarily use CUSIP number.","title":"ISIN"},{"location":"markets/symbology/#cusip","text":"CUSIP stands for Committee on Uniform Securities Identification Procedures. A CUSIP number identifies most financial instruments, including: stocks of all registered U.S. and Canadian companies, commercial paper, and U.S. government and municipal bonds. The CUSIP system (formally known as CUSIP Global Services)\u2014owned by the American Bankers Association and managed by Standard & Poor\u2019s\u2014facilitates the clearance and settlement process of securities. CUSIP numbers consist of nine characters (including letters and numbers) that uniquely identify a company or issuer and the type of financial instrument. The first six characters are known as the base, or CUSIP-6, and identify the bond issuer. The seventh and eighth digits identify the type of bond and the ninth digit is a \u201ccheck digit\u201d that is automatically generated.","title":"CUSIP"},{"location":"markets/symbology/#sedol","text":"The description below is from wiki . SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes. The numbers are assigned by the London Stock Exchange, on request by the security issuer. SEDOLs serve as the National Securities Identifying Number for all securities issued in the United Kingdom and are therefore part of the security's ISIN as well. SEDOLs are seven characters in length, consisting of two parts: a six-place alphanumeric code and a trailing check digit.[1] SEDOLs issued prior to January 26, 2004 were composed only of numbers. For older SEDOLs, those from Asia and Africa typically begin with 6. Those from the UK and Ireland (until Ireland joined the EU) typically begin with 0 or 3. Those from the rest of Europe typically began with 4, 5, or 7. Those from the Americas began with 2. After January 26, 2004, SEDOLs were changed to be alpha-numeric and are issued sequentially, beginning with B000009. At each character position numbers precede letters and vowels are never used. All new SEDOLs, therefore, begin with a letter. Ranges beginning with 9 are reserved for end user allocation. The check digit for a SEDOL is chosen to make the total weighted sum of all seven characters a multiple of 10. The check digit is computed using a weighted sum of the first six characters. Letters have the value of 9 plus their alphabet position, such that B = 11 and Z = 35. While vowels are never used in SEDOLs, they are not ignored when computing this weighted sum (e.g. H = 17 and J = 19, even though I is not used), simplifying code to compute this sum. The resulting string of numbers is then multiplied by the weighting factor as follows:","title":"SEDOL"},{"location":"markets/symbology/#other-symbology","text":"","title":"Other Symbology"},{"location":"markets/symbology/#bloomberg-ticker","text":"A Bloomberg ticker is a string of characters or numbers to identify a company or entity uniquely in Bloomberg. Equity Bloomberg ticker is made up of 3 parts: Bloomberg ticker Exchange code Market Sector [Equity] Examples : Singapore Airlines is SIA SP EQUITY . IBM is IBM US EQUITY . Index Bloomberg ticker consists of: Bloomberg ticker Market Sector [Index] Example : Hang Seng Index is HSI INDEX .","title":"Bloomberg Ticker"},{"location":"markets/symbology/#nasdaq-act","text":"This symbology is for reporting and clearing . Automated Confirmation of Transactions (ACT), is a system for reporting and clearing trades in the over-the-counter (OTC) and NASDAQ securities markets. The Financial Industry Regulatory Authority (FINRA) also refers to NASDAQ ACT as the Trade Reporting Facility (TRF).","title":"NASDAQ ACT"},{"location":"markets/symbology/#nasdaq-integrated-platform","text":"This symbology is for trading . Initially, NASDAQ use the integrated platform symbology for non-Nasdaq listed names. From 2007 to 2010, Nasdaq migrated from fifth-character modifier symbology to the integrated platform suffix. More info about this migration can be found here . CEBO (BATS, BATS Y, EDGEA, EDGEX) follows this symbology. The list of symbols traded is available here .","title":"NASDAQ Integrated Platform"},{"location":"markets/symbology/#nyse-symbol","text":"NYSE provides Daily TAQ (Trade and Quote) which includes all trades and quotes for all issues traded on U.S. exchanges and off-markets. The Daily TAQ files also include the NBBO, Master file, Quote and Trade Admin Messages, and, CTA and UTP Admin Message files. Historical Data available as of 1993-present. Symbols in NYSE TAQ are expressed in NYSE Symbology, which consists of Root (6 chars maximum), space, and Suffix (10 chars maximum) . See the NYSE Symbology Specification for details. The Master File also includes the symbols in the original formats published by the SIPs. For CTA symbols, see CTS Binary Output Specification Appendix B. For UTP symbols, see Nasdaq 5 th Character Suffix List . Some basic stats on the length of root and suffix in NYSE symbols over the first half year in 2019: listedExchange nSymbols minRootLength maxRootLength minSuffixLength maxSuffixLength A 330 2 4 0 4 N 3274 1 4 0 5 P 1667 2 4 0 0 Q 3644 1 4 0 1 V 1 4 4 0 0 Z 343 3 4 0 0 One example of NYSE symbol that has five chars in suffix is C PRLCL , which is Pr eferred Class L C a l led.","title":"NYSE Symbol"},{"location":"markets/symbology/#sip-symbol","text":"In NYSE TAQ, the \"SIP Symbol\" uses mixed symbology: For Nasdaq-listed securities, it is Nasdaq lising symbol For other regionally listed securities, it is CQS (Consolidated Quotation System) symbol","title":"SIP Symbol"},{"location":"markets/symbology/#finra-ats-data","text":"FINRA made the ATS and non-ATS data available to public for free. It also provides an API to retrieve data from its database in January 2019. This data povides us a channel and the only channel to understand the liquidity distribution on off markets. To find the full liquidity distribution among all lit exchanges and dark pools, we need to marry FINRA ATS data with NYSE TAQ data. In this process, the first problem we need to solve is the symbol mapping. Tier 1 Tier 2 The Appendix A of FINRA OTC Transparency API Specifications provides some additional information on what symbology is used for ATS and non-ATS data reported to FINRA. Here is the Appendix A: This section serves as a supplemental resource for security and symbol information provided by FINRA. Reports are published using the NASDAQ assigned listing symbol for UTP securities and the NASDAQ ACT symbol for Other Exchange Listed securities (NMS stocks). Other Exchange Listed security symbols may contain a special character such as \u201c.\u201d or \u201c$\u201d to separate the root symbol from the suffix. Daily list of Nasdaq listed symbols Daily list of other listed symbols Ticker Symbol Convention Mapping between NYSE Symbol and FINRA Symbol","title":"FINRA ATS Data"},{"location":"markets/symbology/#references","text":"NASDAQ ACT CQS Symbol Conversion Reuters Instrument Code","title":"References"},{"location":"python/a-first-taste-of-pathlib/","text":"A First Taste of pathlib \u00b6 May 21, 2019 Introduction \u00b6 The library pathlib is introduced in Python 3.4 and it brings us a spate of convenient features. I try using this library instead of the traditional functions provided in modules os and os.path in one of my projects and demonstrate why it is better than the traditional functions. The task here is to write a function to download the daily volume file from this page for a given year. Traditional Python Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests import os def download_file_1 ( year ): site_url = 'http://markets.cboe.com/us/equities' base_url = f ' {site_url} /market_statistics/historical_market_volume' url = f ' {base_url} /market_history_ {year} .csv-dl' fpath = os . path . join ( os . path . expanduser ( \"~\" ), 'data' , 'daily_volume' ) if not os . path . exists ( fpath ): os . makedirs ( fpath ) fname = os . path . join ( fpath , f 'daily_volume_ {year} .csv' ) res = requests . get ( url ) with open ( fname , 'w' ) as f : f . write ( res . text ) if __name__ == \"__main__\" : download_file_1 ( 2019 ) Using pathlib \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests from pathlib import Path def download_file_2 ( year ): site_url = 'http://markets.cboe.com/us/equities' base_url = f ' {site_url} /market_statistics/historical_market_volume' url = f ' {base_url} /market_history_ {year} .csv-dl' fpath = Path . home () . joinpath ( 'data' , 'daily_volume' ) fpath . mkdir ( parents = True , exist_ok = True ) fname = fpath / f 'daily_volume_ {year} .csv' res = requests . get ( url ) with fname . open ( 'w' ) as f : f . write ( res . text ) if __name__ == \"__main__\" : download_file_2 ( 2019 ) Main Differences \u00b6 The main differences are highlighted at lines 9, 10, 11 and 14. Get home directory os.path.expanduser(\"~\") Path.home() Join path os.path.join('dir', 'subdir') Path.joinpath('dir', 'subdir') Create path if not os.path.exists(fpath): os.makedirs(fpath) fpath.mkdir(parents=True, exist_ok=True) Open file with open(fname, 'w') as f with fname.open('w') as f Summary \u00b6 pathlib library puts these methods that used to be in os and os.path into a single library and makes it easier to use. For additional features provided by this library, see pathlib .","title":"A First Taste of pathlib"},{"location":"python/a-first-taste-of-pathlib/#a-first-taste-of-pathlib","text":"May 21, 2019","title":"A First Taste of pathlib"},{"location":"python/a-first-taste-of-pathlib/#introduction","text":"The library pathlib is introduced in Python 3.4 and it brings us a spate of convenient features. I try using this library instead of the traditional functions provided in modules os and os.path in one of my projects and demonstrate why it is better than the traditional functions. The task here is to write a function to download the daily volume file from this page for a given year.","title":"Introduction"},{"location":"python/a-first-taste-of-pathlib/#traditional-python-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests import os def download_file_1 ( year ): site_url = 'http://markets.cboe.com/us/equities' base_url = f ' {site_url} /market_statistics/historical_market_volume' url = f ' {base_url} /market_history_ {year} .csv-dl' fpath = os . path . join ( os . path . expanduser ( \"~\" ), 'data' , 'daily_volume' ) if not os . path . exists ( fpath ): os . makedirs ( fpath ) fname = os . path . join ( fpath , f 'daily_volume_ {year} .csv' ) res = requests . get ( url ) with open ( fname , 'w' ) as f : f . write ( res . text ) if __name__ == \"__main__\" : download_file_1 ( 2019 )","title":"Traditional Python Code"},{"location":"python/a-first-taste-of-pathlib/#using-pathlib","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests from pathlib import Path def download_file_2 ( year ): site_url = 'http://markets.cboe.com/us/equities' base_url = f ' {site_url} /market_statistics/historical_market_volume' url = f ' {base_url} /market_history_ {year} .csv-dl' fpath = Path . home () . joinpath ( 'data' , 'daily_volume' ) fpath . mkdir ( parents = True , exist_ok = True ) fname = fpath / f 'daily_volume_ {year} .csv' res = requests . get ( url ) with fname . open ( 'w' ) as f : f . write ( res . text ) if __name__ == \"__main__\" : download_file_2 ( 2019 )","title":"Using pathlib"},{"location":"python/a-first-taste-of-pathlib/#main-differences","text":"The main differences are highlighted at lines 9, 10, 11 and 14. Get home directory os.path.expanduser(\"~\") Path.home() Join path os.path.join('dir', 'subdir') Path.joinpath('dir', 'subdir') Create path if not os.path.exists(fpath): os.makedirs(fpath) fpath.mkdir(parents=True, exist_ok=True) Open file with open(fname, 'w') as f with fname.open('w') as f","title":"Main Differences"},{"location":"python/a-first-taste-of-pathlib/#summary","text":"pathlib library puts these methods that used to be in os and os.path into a single library and makes it easier to use. For additional features provided by this library, see pathlib .","title":"Summary"},{"location":"python/evolution-of-string-formatting/","text":"Evolution of String Formatting \u00b6 May 22, 2019 Introduction \u00b6 String formatting is one of the basic features provided by any programming language. Python offers a few different options on how to format a string. Old Style: %-formatting \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 # Variable is string first_name = 'David' last_name = 'Han' print ( 'My name is %s %s ' % ( first_name , last_name )) print ( 'My name is %(first_name)s %(last_name)s ' % locals ()) # Variable is integer age = 30 print ( 'I am %d years old' % ( age )) # Variable is float pi = 3.1415926 print ( 'Pi with 3 decimals is %.3f ' % ( pi )) New Style: str.format() \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 # Variable is string first_name = 'David' last_name = 'Han' print ( 'My name is {first_name} {last_name} ' . format ( ** locals ())) # Variable is integer age = 30 print ( 'I am {age} years old' . format ( ** locals ())) # Variable is float pi = 3.1415926 print ( 'Pi with 3 decimals is {:.3f} ' . format ( pi )) Latest Style: f-string \u00b6 f-string is introduced in Python 3.6. 1 2 3 4 5 6 7 8 9 10 11 12 # Variable is string first_name = 'David' last_name = 'Han' print ( f 'My name is {first_name} {last_name} ' ) # Variable is integer age = 30 print ( f 'I am {age} years old' ) # Variable is float pi = 3.1415926 print ( f 'Pi with 3 decimals is {pi:.4} ' ) For additional details on f-string, see here . Summary \u00b6 As we can see from above, the latest f-string formatting style is dramatically easier to use and understand. Two excellent articles about Python formatting are: Python 3's f-Strings: An Improved String Formatting Syntax Using % and .format() for great good!","title":"Evolution of String Formatting"},{"location":"python/evolution-of-string-formatting/#evolution-of-string-formatting","text":"May 22, 2019","title":"Evolution of String Formatting"},{"location":"python/evolution-of-string-formatting/#introduction","text":"String formatting is one of the basic features provided by any programming language. Python offers a few different options on how to format a string.","title":"Introduction"},{"location":"python/evolution-of-string-formatting/#old-style-formatting","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 # Variable is string first_name = 'David' last_name = 'Han' print ( 'My name is %s %s ' % ( first_name , last_name )) print ( 'My name is %(first_name)s %(last_name)s ' % locals ()) # Variable is integer age = 30 print ( 'I am %d years old' % ( age )) # Variable is float pi = 3.1415926 print ( 'Pi with 3 decimals is %.3f ' % ( pi ))","title":"Old Style: %-formatting"},{"location":"python/evolution-of-string-formatting/#new-style-strformat","text":"1 2 3 4 5 6 7 8 9 10 11 12 # Variable is string first_name = 'David' last_name = 'Han' print ( 'My name is {first_name} {last_name} ' . format ( ** locals ())) # Variable is integer age = 30 print ( 'I am {age} years old' . format ( ** locals ())) # Variable is float pi = 3.1415926 print ( 'Pi with 3 decimals is {:.3f} ' . format ( pi ))","title":"New Style: str.format()"},{"location":"python/evolution-of-string-formatting/#latest-style-f-string","text":"f-string is introduced in Python 3.6. 1 2 3 4 5 6 7 8 9 10 11 12 # Variable is string first_name = 'David' last_name = 'Han' print ( f 'My name is {first_name} {last_name} ' ) # Variable is integer age = 30 print ( f 'I am {age} years old' ) # Variable is float pi = 3.1415926 print ( f 'Pi with 3 decimals is {pi:.4} ' ) For additional details on f-string, see here .","title":"Latest Style: f-string"},{"location":"python/evolution-of-string-formatting/#summary","text":"As we can see from above, the latest f-string formatting style is dramatically easier to use and understand. Two excellent articles about Python formatting are: Python 3's f-Strings: An Improved String Formatting Syntax Using % and .format() for great good!","title":"Summary"},{"location":"tips/cron-job/","text":"Cron Job \u00b6 Check whether cron daemon is running: 1 pgrep cron If you see no number, then cron is not running. sudo /etc/init.d/cron start can be used to start cron. Rather than invoking init scripts through /etc/init.d , use the service utility, e.g. 1 sudo service cron start Launch cron daemon \u00b6 First check whether cron is running. Launch it if not. 1 2 3 4 5 re = '^[0-9]+$' cronpid = ` pgrep cron ` if ! [[ $cronpid = ~ $re ]] ; then service cron start > /dev/null 2 > & 1 fi","title":"Cron Job"},{"location":"tips/cron-job/#cron-job","text":"Check whether cron daemon is running: 1 pgrep cron If you see no number, then cron is not running. sudo /etc/init.d/cron start can be used to start cron. Rather than invoking init scripts through /etc/init.d , use the service utility, e.g. 1 sudo service cron start","title":"Cron Job"},{"location":"tips/cron-job/#launch-cron-daemon","text":"First check whether cron is running. Launch it if not. 1 2 3 4 5 re = '^[0-9]+$' cronpid = ` pgrep cron ` if ! [[ $cronpid = ~ $re ]] ; then service cron start > /dev/null 2 > & 1 fi","title":"Launch cron daemon"},{"location":"tips/vim-color-scheme/","text":"Vim Color Scheme \u00b6 June 20, 2019 The default color scheme for vim is not very friendly for comments since it has a dark blue color. You can change the color scheme with the following steps: Create an folder .vim in your home directory: 1 mkdir ~/.vim Checkout the github repository for color schemes: 1 git clone https://github.com/flazz/vim-colorschemes.git ~/.vim Create config file .vimrc in your home directory. The color scheme wombat is used in the example below. 1 echo \"colorscheme wombat\" >> ~/.vimrc If you do not like the color scheme wombat , you can use any other color scheme you like. To find all color schemes available, run: 1 ls ~/.vim/colors A simple count shows that there is 972 different color schemes available for you to choose. 1 2 $ ls -l ~/.vim/colors | wc -l 972","title":"Vim Color Scheme"},{"location":"tips/vim-color-scheme/#vim-color-scheme","text":"June 20, 2019 The default color scheme for vim is not very friendly for comments since it has a dark blue color. You can change the color scheme with the following steps: Create an folder .vim in your home directory: 1 mkdir ~/.vim Checkout the github repository for color schemes: 1 git clone https://github.com/flazz/vim-colorschemes.git ~/.vim Create config file .vimrc in your home directory. The color scheme wombat is used in the example below. 1 echo \"colorscheme wombat\" >> ~/.vimrc If you do not like the color scheme wombat , you can use any other color scheme you like. To find all color schemes available, run: 1 ls ~/.vim/colors A simple count shows that there is 972 different color schemes available for you to choose. 1 2 $ ls -l ~/.vim/colors | wc -l 972","title":"Vim Color Scheme"},{"location":"tutorials/javascript/","text":"JavaScript Snippets \u00b6 Arrays \u00b6 Get unique values of an array \u00b6 Getting an array of unique values is probably easier than you think: 1 2 const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4] Array and Boolean \u00b6 Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: 1 2 3 4 5 6 const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away Objects \u00b6 Create an empty object \u00b6 Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: 1 2 3 4 let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there! Merge objects \u00b6 The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */ Reference \u00b6 https://davidwalsh.name/javascript-tricks","title":"JavaScript Snippets"},{"location":"tutorials/javascript/#javascript-snippets","text":"","title":"JavaScript Snippets"},{"location":"tutorials/javascript/#arrays","text":"","title":"Arrays"},{"location":"tutorials/javascript/#get-unique-values-of-an-array","text":"Getting an array of unique values is probably easier than you think: 1 2 const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4]","title":"Get unique values of an array"},{"location":"tutorials/javascript/#array-and-boolean","text":"Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: 1 2 3 4 5 6 const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away","title":"Array and Boolean"},{"location":"tutorials/javascript/#objects","text":"","title":"Objects"},{"location":"tutorials/javascript/#create-an-empty-object","text":"Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: 1 2 3 4 let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there!","title":"Create an empty object"},{"location":"tutorials/javascript/#merge-objects","text":"The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */","title":"Merge objects"},{"location":"tutorials/javascript/#reference","text":"https://davidwalsh.name/javascript-tricks","title":"Reference"},{"location":"tutorials/javascript/arrays/","text":"Arrays \u00b6 Get unique values of an array \u00b6 Getting an array of unique values is probably easier than you think: 1 2 const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4] Array and Boolean \u00b6 Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: 1 2 3 4 5 6 const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away!","title":"Arrays"},{"location":"tutorials/javascript/arrays/#arrays","text":"","title":"Arrays"},{"location":"tutorials/javascript/arrays/#get-unique-values-of-an-array","text":"Getting an array of unique values is probably easier than you think: 1 2 const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4]","title":"Get unique values of an array"},{"location":"tutorials/javascript/arrays/#array-and-boolean","text":"Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: 1 2 3 4 5 6 const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away!","title":"Array and Boolean"},{"location":"tutorials/javascript/destructuring/","text":"Desctructuring \u00b6 Destructuring aliases \u00b6 Destructuring is a very welcomed addition to JavaScript but sometimes we'd prefer to refer to those properties by another name, so we can take advantage of aliases: 1 2 3 4 5 6 7 const obj = { x : 1 }; // Grabs obj.x as { x } const { x } = obj ; // Grabs obj.x as { otherName } const { x : otherName } = obj ; Useful for avoiding naming conflicts with existing variables!","title":"Destructuring"},{"location":"tutorials/javascript/destructuring/#desctructuring","text":"","title":"Desctructuring"},{"location":"tutorials/javascript/destructuring/#destructuring-aliases","text":"Destructuring is a very welcomed addition to JavaScript but sometimes we'd prefer to refer to those properties by another name, so we can take advantage of aliases: 1 2 3 4 5 6 7 const obj = { x : 1 }; // Grabs obj.x as { x } const { x } = obj ; // Grabs obj.x as { otherName } const { x : otherName } = obj ; Useful for avoiding naming conflicts with existing variables!","title":"Destructuring aliases"},{"location":"tutorials/javascript/objects/","text":"Objects \u00b6 Create an empty object \u00b6 Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: 1 2 3 4 let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there! Merge objects \u00b6 The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */","title":"Objects"},{"location":"tutorials/javascript/objects/#objects","text":"","title":"Objects"},{"location":"tutorials/javascript/objects/#create-an-empty-object","text":"Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: 1 2 3 4 let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there!","title":"Create an empty object"},{"location":"tutorials/javascript/objects/#merge-objects","text":"The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */","title":"Merge objects"},{"location":"vscode/about/","text":"","title":"About"},{"location":"vscode/common/common/","text":"VS Code Tips \u00b6","title":"Common"},{"location":"vscode/common/common/#vs-code-tips","text":"","title":"VS Code Tips"},{"location":"vscode/javascript/javascript/","text":"VS Code Tips For JavaScript \u00b6","title":"JavaScript"},{"location":"vscode/javascript/javascript/#vs-code-tips-for-javascript","text":"","title":"VS Code Tips For JavaScript"},{"location":"vscode/python/python/","text":"VS Code Tips for Python \u00b6 Plugins \u00b6 Python Trailing Spaces Code Runner Prettier - Code formatter Todo Tree autoDocstring Python-autopep8 Tips and Tricks \u00b6","title":"Python"},{"location":"vscode/python/python/#vs-code-tips-for-python","text":"","title":"VS Code Tips for Python"},{"location":"vscode/python/python/#plugins","text":"Python Trailing Spaces Code Runner Prettier - Code formatter Todo Tree autoDocstring Python-autopep8","title":"Plugins"},{"location":"vscode/python/python/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"weeklyq/2020/","text":"Weekly Kdb/q Questions \u00b6 2020.02.17 \u00b6 In the electronic trading world, parameterization is so common that some Algorithms are configured with hundreds or thousands of parameters. An algorithmic order can easily has hundreds of parameters and some of which are exposed to users so that they can amend the order attibutes. For example, the participation rate of a POV (Percent Of Volume) order can be amended by users. A common question encountered in the our daily work is which parameters are modified and how it is changed when an amend happens. Q: Below is an example history of a few selected parameters of a POV order. Create a table to show the parameter history with each parameter name as the column name in the table. You need to treat the change in order quantity and/or price limit the same as parameter change. 1 2 3 4 5 6 7 8 paramTbl:([]time:`time$();orderQty:`long$();limitPrice:`float$();params:()); `paramTbl insert (09:30:56.123;500000;0n;`StartTime`ParticipationRate!(10:00:00.000;0.08)); `paramTbl insert (09:35:44.735;500000;0n;`StartTime`ParticipationRate!(09:40:00.000;0.08)); `paramTbl insert (10:01:25.941;500000;0n;`StartTime`ParticipationRate`Urgency!(09:40:00.000;0.12;`Medium)); `paramTbl insert (10:10:32.356;500000;0n;`StartTime`ParticipationRate`MinParcipationRate`MaxParcipationRate`Urgency!(09:40:00.000;0.12;0.10;0.14;`Medium)); `paramTbl insert (10:30:39.475;500000;45.23;`StartTime`ParticipationRate`MinParcipationRate`MaxParcipationRate`Urgency!(09:40:00.000;0.12;0.10;0.14;`Medium)); `paramTbl insert (11:00:52.092;600000;45.27;`StartTime`ParticipationRate`MinParcipationRate`MaxParcipationRate`Urgency!(09:40:00.000;0.12;0.10;0.14;`Medium)); `paramTbl insert (11:00:52.092;1000000;0n;`StartTime`ParticipationRate`Urgency!(09:40:00.000;0.15;`Medium)); The final output table should look like as follows. Note in kdb table, the empty cell in the table below should have proper null value. time OrderQty LimitPrice StartTime ParticipationRate Urgency MinParcipationRate MaxParcipationRate 09:30:56.123 500000 10:00:00.000 0.08 09:35:44.735 500000 09:40:00.000 0.08 10:01:25.941 500000 09:40:00.000 0.12 Medium 10:10:32.356 500000 09:40:00.000 0.12 Medium 0.1 0.14 10:30:39.475 500000 45.23 09:40:00.000 0.12 Medium 0.1 0.14 11:00:52.092 600000 45.27 09:40:00.000 0.12 Medium 0.1 0.14 11:00:52.092 1000000 09:40:00.000 0.15 Medium","title":2020},{"location":"weeklyq/2020/#weekly-kdbq-questions","text":"","title":"Weekly Kdb/q Questions"},{"location":"weeklyq/2020/#20200217","text":"In the electronic trading world, parameterization is so common that some Algorithms are configured with hundreds or thousands of parameters. An algorithmic order can easily has hundreds of parameters and some of which are exposed to users so that they can amend the order attibutes. For example, the participation rate of a POV (Percent Of Volume) order can be amended by users. A common question encountered in the our daily work is which parameters are modified and how it is changed when an amend happens. Q: Below is an example history of a few selected parameters of a POV order. Create a table to show the parameter history with each parameter name as the column name in the table. You need to treat the change in order quantity and/or price limit the same as parameter change. 1 2 3 4 5 6 7 8 paramTbl:([]time:`time$();orderQty:`long$();limitPrice:`float$();params:()); `paramTbl insert (09:30:56.123;500000;0n;`StartTime`ParticipationRate!(10:00:00.000;0.08)); `paramTbl insert (09:35:44.735;500000;0n;`StartTime`ParticipationRate!(09:40:00.000;0.08)); `paramTbl insert (10:01:25.941;500000;0n;`StartTime`ParticipationRate`Urgency!(09:40:00.000;0.12;`Medium)); `paramTbl insert (10:10:32.356;500000;0n;`StartTime`ParticipationRate`MinParcipationRate`MaxParcipationRate`Urgency!(09:40:00.000;0.12;0.10;0.14;`Medium)); `paramTbl insert (10:30:39.475;500000;45.23;`StartTime`ParticipationRate`MinParcipationRate`MaxParcipationRate`Urgency!(09:40:00.000;0.12;0.10;0.14;`Medium)); `paramTbl insert (11:00:52.092;600000;45.27;`StartTime`ParticipationRate`MinParcipationRate`MaxParcipationRate`Urgency!(09:40:00.000;0.12;0.10;0.14;`Medium)); `paramTbl insert (11:00:52.092;1000000;0n;`StartTime`ParticipationRate`Urgency!(09:40:00.000;0.15;`Medium)); The final output table should look like as follows. Note in kdb table, the empty cell in the table below should have proper null value. time OrderQty LimitPrice StartTime ParticipationRate Urgency MinParcipationRate MaxParcipationRate 09:30:56.123 500000 10:00:00.000 0.08 09:35:44.735 500000 09:40:00.000 0.08 10:01:25.941 500000 09:40:00.000 0.12 Medium 10:10:32.356 500000 09:40:00.000 0.12 Medium 0.1 0.14 10:30:39.475 500000 45.23 09:40:00.000 0.12 Medium 0.1 0.14 11:00:52.092 600000 45.27 09:40:00.000 0.12 Medium 0.1 0.14 11:00:52.092 1000000 09:40:00.000 0.15 Medium","title":"2020.02.17"}]}