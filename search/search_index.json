{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docs \u00b6 This is a static documentation site. \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Home"},{"location":"#docs","text":"This is a static documentation site. \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Docs"},{"location":"getting-started/","text":"Getting started \u00b6 Live Preview \u00b6 MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: mkdocs serve Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#live-preview","text":"MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: mkdocs serve Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme.","title":"Live Preview"},{"location":"javascript/about/","text":"","title":"About"},{"location":"kdb/dictionary/add-new-item-to-dictionary/","text":"Add new item to dictionary \u00b6","title":"Add new item to dictionary"},{"location":"kdb/dictionary/add-new-item-to-dictionary/#add-new-item-to-dictionary","text":"","title":"Add new item to dictionary"},{"location":"kdb/function/function-argument/","text":"Function argument \u00b6","title":"Function argument"},{"location":"kdb/function/function-argument/#function-argument","text":"","title":"Function argument"},{"location":"markets/rar/ssr/","text":"Short Sell Restriction \u00b6 May 10, 2019 I had a VWAP long sell order on LMNX.OQ unfinished on May 8, 2019. One basic requirement of a VWAP strategy is to guarantee the order completion at client specified end time or market close if an end time is not provided for the client order if no volume limit or price limit. This made me a little bit confused \ud83d\ude1f. A quick digging shows this stock was trading under short sell restriction. Due to this restriction, the VWAP algorithm cannot cross the spread to finish the residual shares. My immediate question is why this long sell order is short sell restricted. Some research leads me to the NYSE TAQ Specifications . On page 24, it says A Short Sale Restriction is to be in effect if a security\u2019s price decreases by 10% or more from the previous day\u2019s closing price. Once activated, the Short Sale Restriction will remain in effect for the remainder of the day as well as the following day, unless deactivated. Next I went to Yahoo Finance to check the OHLC prices for the days before May 8, 2019 as shown below: Clearly the intraday price dropped more than 10% from its previous close on May 7, 2019, which activated the short sell restriction. So the trading on May 8 is also under SSR. Why did the price drop so much on May 7, 2019? A little further digging shows this is due to the much worse earnings than the average expectation repored after market close on May 6, 2019. The earnings surprise is -200%.","title":"Short Sell Restriction"},{"location":"markets/rar/ssr/#short-sell-restriction","text":"May 10, 2019 I had a VWAP long sell order on LMNX.OQ unfinished on May 8, 2019. One basic requirement of a VWAP strategy is to guarantee the order completion at client specified end time or market close if an end time is not provided for the client order if no volume limit or price limit. This made me a little bit confused \ud83d\ude1f. A quick digging shows this stock was trading under short sell restriction. Due to this restriction, the VWAP algorithm cannot cross the spread to finish the residual shares. My immediate question is why this long sell order is short sell restricted. Some research leads me to the NYSE TAQ Specifications . On page 24, it says A Short Sale Restriction is to be in effect if a security\u2019s price decreases by 10% or more from the previous day\u2019s closing price. Once activated, the Short Sale Restriction will remain in effect for the remainder of the day as well as the following day, unless deactivated. Next I went to Yahoo Finance to check the OHLC prices for the days before May 8, 2019 as shown below: Clearly the intraday price dropped more than 10% from its previous close on May 7, 2019, which activated the short sell restriction. So the trading on May 8 is also under SSR. Why did the price drop so much on May 7, 2019? A little further digging shows this is due to the much worse earnings than the average expectation repored after market close on May 6, 2019. The earnings surprise is -200%.","title":"Short Sell Restriction"},{"location":"python/about/","text":"Futures and Options \u00b6","title":"About"},{"location":"python/about/#futures-and-options","text":"","title":"Futures and Options"},{"location":"tutorials/javascript/","text":"JavaScript Snippets \u00b6 Arrays \u00b6 Get unique values of an array \u00b6 Getting an array of unique values is probably easier than you think: const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4] Array and Boolean \u00b6 Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away Objects \u00b6 Create an empty object \u00b6 Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there! Merge objects \u00b6 The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */ Reference \u00b6 https://davidwalsh.name/javascript-tricks","title":"JavaScript Snippets"},{"location":"tutorials/javascript/#javascript-snippets","text":"","title":"JavaScript Snippets"},{"location":"tutorials/javascript/#arrays","text":"","title":"Arrays"},{"location":"tutorials/javascript/#get-unique-values-of-an-array","text":"Getting an array of unique values is probably easier than you think: const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4]","title":"Get unique values of an array"},{"location":"tutorials/javascript/#array-and-boolean","text":"Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away","title":"Array and Boolean"},{"location":"tutorials/javascript/#objects","text":"","title":"Objects"},{"location":"tutorials/javascript/#create-an-empty-object","text":"Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there!","title":"Create an empty object"},{"location":"tutorials/javascript/#merge-objects","text":"The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */","title":"Merge objects"},{"location":"tutorials/javascript/#reference","text":"https://davidwalsh.name/javascript-tricks","title":"Reference"},{"location":"tutorials/javascript/arrays/","text":"Arrays \u00b6 Get unique values of an array \u00b6 Getting an array of unique values is probably easier than you think: const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4] Array and Boolean \u00b6 Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away!","title":"Arrays"},{"location":"tutorials/javascript/arrays/#arrays","text":"","title":"Arrays"},{"location":"tutorials/javascript/arrays/#get-unique-values-of-an-array","text":"Getting an array of unique values is probably easier than you think: const uniqueArray = [... new Set ([ 2 , 1 , 2 , 1 , 3 , 3 , 4 , 4 ])]; console . log ( uniqueArray ); // [2, 1, 3, 4]","title":"Get unique values of an array"},{"location":"tutorials/javascript/arrays/#array-and-boolean","text":"Ever need to filter falsy values (0, undefined, null, false, etc.) out of an array? You may not have known this trick: const arrayValues = [ \"\" , \"David\" , \"Han\" ]; const nonFalsyValues = arrayValues . map ( item => { return item . length ; }) . filter ( Boolean ); // Get rid of bad values Just pass Boolean and all those falsy value go away!","title":"Array and Boolean"},{"location":"tutorials/javascript/destructuring/","text":"Desctructuring \u00b6 Destructuring aliases \u00b6 Destructuring is a very welcomed addition to JavaScript but sometimes we'd prefer to refer to those properties by another name, so we can take advantage of aliases: const obj = { x : 1 }; // Grabs obj.x as { x } const { x } = obj ; // Grabs obj.x as { otherName } const { x : otherName } = obj ; Useful for avoiding naming conflicts with existing variables!","title":"Destructuring"},{"location":"tutorials/javascript/destructuring/#desctructuring","text":"","title":"Desctructuring"},{"location":"tutorials/javascript/destructuring/#destructuring-aliases","text":"Destructuring is a very welcomed addition to JavaScript but sometimes we'd prefer to refer to those properties by another name, so we can take advantage of aliases: const obj = { x : 1 }; // Grabs obj.x as { x } const { x } = obj ; // Grabs obj.x as { otherName } const { x : otherName } = obj ; Useful for avoiding naming conflicts with existing variables!","title":"Destructuring aliases"},{"location":"tutorials/javascript/objects/","text":"Objects \u00b6 Create an empty object \u00b6 Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there! Merge objects \u00b6 The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */","title":"Objects"},{"location":"tutorials/javascript/objects/#objects","text":"","title":"Objects"},{"location":"tutorials/javascript/objects/#create-an-empty-object","text":"Sure you can create an object that seems empty with {}, but that object still has a proto and the usual hasOwnProperty and other object methods. There is a way, however, to create a pure \"dictionary\" object: let dict = Object . create ( null ); // dict.__proto__ === \"undefined\" // No object properties exist until you add them There are absolutely no keys or methods on that object that you don't put there!","title":"Create an empty object"},{"location":"tutorials/javascript/objects/#merge-objects","text":"The need to merge multiple objects in JavaScript has been around forever, especially as we started creating classes and widgets with options: const person = { name : 'David Walsh' , gender : 'Male' }; const tools = { computer : 'Mac' , editor : 'Atom' }; const attributes = { handsomeness : 'Extreme' , hair : 'Brown' , eyes : 'Blue' }; const summary = {... person , ... tools , ... attributes }; /* Object { \"computer\": \"Mac\", \"editor\": \"Atom\", \"eyes\": \"Blue\", \"gender\": \"Male\", \"hair\": \"Brown\", \"handsomeness\": \"Extreme\", \"name\": \"David Walsh\", } */","title":"Merge objects"},{"location":"vscode/about/","text":"","title":"About"},{"location":"vscode/common/common/","text":"VS Code Tips \u00b6","title":"Common"},{"location":"vscode/common/common/#vs-code-tips","text":"","title":"VS Code Tips"},{"location":"vscode/javascript/javascript/","text":"VS Code Tips For JavaScript \u00b6","title":"JavaScript"},{"location":"vscode/javascript/javascript/#vs-code-tips-for-javascript","text":"","title":"VS Code Tips For JavaScript"},{"location":"vscode/python/python/","text":"VS Code Tips for Python \u00b6 Plugins \u00b6 Python Trailing Spaces Code Runner Prettier - Code formatter Todo Tree autoDocstring Python-autopep8 Tips and Tricks \u00b6","title":"Python"},{"location":"vscode/python/python/#vs-code-tips-for-python","text":"","title":"VS Code Tips for Python"},{"location":"vscode/python/python/#plugins","text":"Python Trailing Spaces Code Runner Prettier - Code formatter Todo Tree autoDocstring Python-autopep8","title":"Plugins"},{"location":"vscode/python/python/#tips-and-tricks","text":"","title":"Tips and Tricks"}]}